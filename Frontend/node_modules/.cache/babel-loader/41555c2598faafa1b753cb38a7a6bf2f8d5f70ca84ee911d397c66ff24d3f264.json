{"ast":null,"code":"import axios from \"axios\";\n\n// URL for the ML price prediction service\nconst ML_SERVICE_URL = process.env.REACT_APP_ML_SERVICE_URL || \"http://localhost:5001\";\n\n/**\r\n * Get market rental price analysis for a car\r\n *\r\n * @param {Object} car - Car object with brand, year, and rental price\r\n * @param {string} occasion - Type of occasion (Wedding, Corporate Event, etc.)\r\n * @param {number} durationDays - Number of rental days\r\n * @returns {Promise<Object>} - Price analysis results\r\n */\nexport const getMarketRentalAnalysis = async (car, occasion = \"Wedding\", durationDays = 1) => {\n  try {\n    // For development/testing, return mock data if ML service is not available\n    // In production, you would remove this and rely on the actual ML service\n    if (process.env.NODE_ENV === \"development\") {\n      console.log(\"Using mock rental price analysis data for development\");\n      return getMockRentalAnalysis(car, occasion, durationDays);\n    }\n    const response = await axios.post(`${ML_SERVICE_URL}/predict`, {\n      brand: car.brand,\n      year: car.year,\n      occasion: occasion,\n      duration_days: durationDays,\n      current_price: car.pricePerDay || car.price\n    });\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching rental price analysis:\", error);\n    // Fallback to mock data if the service is unavailable\n    return getMockRentalAnalysis(car, occasion, durationDays);\n  }\n};\n\n/**\r\n * Generate mock rental price analysis data for development/testing\r\n *\r\n * @param {Object} car - Car object with rental price\r\n * @param {string} occasion - Type of occasion\r\n * @param {number} durationDays - Number of rental days\r\n * @returns {Object} - Mock rental price analysis data\r\n */\nconst getMockRentalAnalysis = (car, occasion, durationDays) => {\n  const currentPrice = car.pricePerDay || car.price;\n\n  // Different occasions have different price multipliers\n  const occasionMultipliers = {\n    Wedding: 1.5,\n    \"Corporate Event\": 1.2,\n    Prom: 1.3,\n    Photoshoot: 1.1,\n    \"Music Video\": 1.4,\n    Anniversary: 1.1,\n    Birthday: 1.0,\n    Graduation: 1.2\n  };\n\n  // Apply occasion multiplier with some randomness\n  const multiplier = occasionMultipliers[occasion] || 1.0;\n  const randomFactor = 0.8 + Math.random() * 0.4; // Between 0.8 and 1.2\n  const predictedPrice = currentPrice * multiplier * randomFactor;\n\n  // Calculate difference percentage\n  const diffPercentage = (predictedPrice - currentPrice) / currentPrice * 100;\n\n  // Determine market status based on the difference\n  let marketStatus, analysis;\n  if (diffPercentage > 10) {\n    marketStatus = \"underpriced\";\n    analysis = `This rental appears to be priced below the estimated market value for ${occasion} events.`;\n  } else if (diffPercentage < -10) {\n    marketStatus = \"overpriced\";\n    analysis = `This rental appears to be priced above the estimated market value for ${occasion} events.`;\n  } else {\n    marketStatus = \"fair\";\n    analysis = `This rental is priced fairly according to the current market for ${occasion} events.`;\n  }\n  return {\n    current_price: currentPrice,\n    predicted_price: predictedPrice,\n    diff_percentage: diffPercentage,\n    market_status: marketStatus,\n    analysis: analysis,\n    occasion: occasion,\n    duration_days: durationDays\n  };\n};\n\n/**\r\n * Format the rental price difference display\r\n *\r\n * @param {Object} analysis - Price analysis object\r\n * @returns {Object} - Formatted display info\r\n */\nexport const formatRentalAnalysis = analysis => {\n  if (!analysis || analysis.error) {\n    return {\n      displayText: \"Market analysis unavailable\",\n      className: \"price-analysis-neutral\"\n    };\n  }\n  const {\n    market_status,\n    diff_percentage,\n    occasion\n  } = analysis;\n\n  // Format the display based on market status\n  switch (market_status) {\n    case \"underpriced\":\n      return {\n        displayText: `${Math.abs(diff_percentage).toFixed(1)}% below market for ${occasion}`,\n        className: \"price-analysis-good-deal\"\n      };\n    case \"overpriced\":\n      return {\n        displayText: `${Math.abs(diff_percentage).toFixed(1)}% above market for ${occasion}`,\n        className: \"price-analysis-high\"\n      };\n    case \"fair\":\n      return {\n        displayText: `Fair market price for ${occasion}`,\n        className: \"price-analysis-fair\"\n      };\n    default:\n      return {\n        displayText: \"Market analysis available\",\n        className: \"price-analysis-neutral\"\n      };\n  }\n};\n\n// Keep the old function names as aliases for backward compatibility\nexport const getMarketPriceAnalysis = getMarketRentalAnalysis;\nexport const formatPriceAnalysis = formatRentalAnalysis;","map":{"version":3,"names":["axios","ML_SERVICE_URL","process","env","REACT_APP_ML_SERVICE_URL","getMarketRentalAnalysis","car","occasion","durationDays","NODE_ENV","console","log","getMockRentalAnalysis","response","post","brand","year","duration_days","current_price","pricePerDay","price","data","error","currentPrice","occasionMultipliers","Wedding","Prom","Photoshoot","Anniversary","Birthday","Graduation","multiplier","randomFactor","Math","random","predictedPrice","diffPercentage","marketStatus","analysis","predicted_price","diff_percentage","market_status","formatRentalAnalysis","displayText","className","abs","toFixed","getMarketPriceAnalysis","formatPriceAnalysis"],"sources":["D:/Shashini/Assignments/Assignments/2025/NSBM/Plymouth/Keith-2/luxury_car_rental/Frontend/src/utils/priceAnalysis.js"],"sourcesContent":["import axios from \"axios\"\r\n\r\n// URL for the ML price prediction service\r\nconst ML_SERVICE_URL = process.env.REACT_APP_ML_SERVICE_URL || \"http://localhost:5001\"\r\n\r\n/**\r\n * Get market rental price analysis for a car\r\n *\r\n * @param {Object} car - Car object with brand, year, and rental price\r\n * @param {string} occasion - Type of occasion (Wedding, Corporate Event, etc.)\r\n * @param {number} durationDays - Number of rental days\r\n * @returns {Promise<Object>} - Price analysis results\r\n */\r\nexport const getMarketRentalAnalysis = async (car, occasion = \"Wedding\", durationDays = 1) => {\r\n  try {\r\n    // For development/testing, return mock data if ML service is not available\r\n    // In production, you would remove this and rely on the actual ML service\r\n    if (process.env.NODE_ENV === \"development\") {\r\n      console.log(\"Using mock rental price analysis data for development\")\r\n      return getMockRentalAnalysis(car, occasion, durationDays)\r\n    }\r\n\r\n    const response = await axios.post(`${ML_SERVICE_URL}/predict`, {\r\n      brand: car.brand,\r\n      year: car.year,\r\n      occasion: occasion,\r\n      duration_days: durationDays,\r\n      current_price: car.pricePerDay || car.price,\r\n    })\r\n\r\n    return response.data\r\n  } catch (error) {\r\n    console.error(\"Error fetching rental price analysis:\", error)\r\n    // Fallback to mock data if the service is unavailable\r\n    return getMockRentalAnalysis(car, occasion, durationDays)\r\n  }\r\n}\r\n\r\n/**\r\n * Generate mock rental price analysis data for development/testing\r\n *\r\n * @param {Object} car - Car object with rental price\r\n * @param {string} occasion - Type of occasion\r\n * @param {number} durationDays - Number of rental days\r\n * @returns {Object} - Mock rental price analysis data\r\n */\r\nconst getMockRentalAnalysis = (car, occasion, durationDays) => {\r\n  const currentPrice = car.pricePerDay || car.price\r\n\r\n  // Different occasions have different price multipliers\r\n  const occasionMultipliers = {\r\n    Wedding: 1.5,\r\n    \"Corporate Event\": 1.2,\r\n    Prom: 1.3,\r\n    Photoshoot: 1.1,\r\n    \"Music Video\": 1.4,\r\n    Anniversary: 1.1,\r\n    Birthday: 1.0,\r\n    Graduation: 1.2,\r\n  }\r\n\r\n  // Apply occasion multiplier with some randomness\r\n  const multiplier = occasionMultipliers[occasion] || 1.0\r\n  const randomFactor = 0.8 + Math.random() * 0.4 // Between 0.8 and 1.2\r\n  const predictedPrice = currentPrice * multiplier * randomFactor\r\n\r\n  // Calculate difference percentage\r\n  const diffPercentage = ((predictedPrice - currentPrice) / currentPrice) * 100\r\n\r\n  // Determine market status based on the difference\r\n  let marketStatus, analysis\r\n\r\n  if (diffPercentage > 10) {\r\n    marketStatus = \"underpriced\"\r\n    analysis = `This rental appears to be priced below the estimated market value for ${occasion} events.`\r\n  } else if (diffPercentage < -10) {\r\n    marketStatus = \"overpriced\"\r\n    analysis = `This rental appears to be priced above the estimated market value for ${occasion} events.`\r\n  } else {\r\n    marketStatus = \"fair\"\r\n    analysis = `This rental is priced fairly according to the current market for ${occasion} events.`\r\n  }\r\n\r\n  return {\r\n    current_price: currentPrice,\r\n    predicted_price: predictedPrice,\r\n    diff_percentage: diffPercentage,\r\n    market_status: marketStatus,\r\n    analysis: analysis,\r\n    occasion: occasion,\r\n    duration_days: durationDays,\r\n  }\r\n}\r\n\r\n/**\r\n * Format the rental price difference display\r\n *\r\n * @param {Object} analysis - Price analysis object\r\n * @returns {Object} - Formatted display info\r\n */\r\nexport const formatRentalAnalysis = (analysis) => {\r\n  if (!analysis || analysis.error) {\r\n    return {\r\n      displayText: \"Market analysis unavailable\",\r\n      className: \"price-analysis-neutral\",\r\n    }\r\n  }\r\n\r\n  const { market_status, diff_percentage, occasion } = analysis\r\n\r\n  // Format the display based on market status\r\n  switch (market_status) {\r\n    case \"underpriced\":\r\n      return {\r\n        displayText: `${Math.abs(diff_percentage).toFixed(1)}% below market for ${occasion}`,\r\n        className: \"price-analysis-good-deal\",\r\n      }\r\n    case \"overpriced\":\r\n      return {\r\n        displayText: `${Math.abs(diff_percentage).toFixed(1)}% above market for ${occasion}`,\r\n        className: \"price-analysis-high\",\r\n      }\r\n    case \"fair\":\r\n      return {\r\n        displayText: `Fair market price for ${occasion}`,\r\n        className: \"price-analysis-fair\",\r\n      }\r\n    default:\r\n      return {\r\n        displayText: \"Market analysis available\",\r\n        className: \"price-analysis-neutral\",\r\n      }\r\n  }\r\n}\r\n\r\n// Keep the old function names as aliases for backward compatibility\r\nexport const getMarketPriceAnalysis = getMarketRentalAnalysis\r\nexport const formatPriceAnalysis = formatRentalAnalysis\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}