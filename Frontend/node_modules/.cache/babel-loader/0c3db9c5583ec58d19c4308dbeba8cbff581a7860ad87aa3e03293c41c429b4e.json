{"ast":null,"code":"import axios from \"axios\";\n\n// URL for the ML price prediction service\nconst ML_SERVICE_URL = process.env.REACT_APP_ML_SERVICE_URL || \"http://localhost:5001\";\n\n/**\r\n * Get market price analysis for a car\r\n *\r\n * @param {Object} car - Car object with brand, year, mileage, and price\r\n * @returns {Promise<Object>} - Price analysis results\r\n */\nexport const getMarketPriceAnalysis = async car => {\n  try {\n    // For development/testing, return mock data if ML service is not available\n    // In production, you would remove this and rely on the actual ML service\n    if (process.env.NODE_ENV === \"development\") {\n      console.log(\"Using mock price analysis data for development\");\n      return getMockPriceAnalysis(car);\n    }\n    const response = await axios.post(`${ML_SERVICE_URL}/predict`, {\n      brand: car.brand,\n      year: car.year,\n      mileage: car.mileage || 0,\n      current_price: car.price\n    });\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching price analysis:\", error);\n    // Fallback to mock data if the service is unavailable\n    return getMockPriceAnalysis(car);\n  }\n};\n\n/**\r\n * Generate mock price analysis data for development/testing\r\n *\r\n * @param {Object} car - Car object with price\r\n * @returns {Object} - Mock price analysis data\r\n */\nconst getMockPriceAnalysis = car => {\n  const currentPrice = car.price;\n\n  // Generate a random predicted price within ±20% of the current price\n  const randomFactor = 0.8 + Math.random() * 0.4; // Between 0.8 and 1.2\n  const predictedPrice = currentPrice * randomFactor;\n\n  // Calculate difference percentage\n  const diffPercentage = (predictedPrice - currentPrice) / currentPrice * 100;\n\n  // Determine market status based on the difference\n  let marketStatus, analysis;\n  if (diffPercentage > 5) {\n    marketStatus = \"underpriced\";\n    analysis = \"This car appears to be priced below the estimated market value.\";\n  } else if (diffPercentage < -5) {\n    marketStatus = \"overpriced\";\n    analysis = \"This car appears to be priced above the estimated market value.\";\n  } else {\n    marketStatus = \"fair\";\n    analysis = \"This car is priced fairly according to the current market.\";\n  }\n  return {\n    current_price: currentPrice,\n    predicted_price: predictedPrice,\n    diff_percentage: diffPercentage,\n    market_status: marketStatus,\n    analysis: analysis\n  };\n};\n\n/**\r\n * Format the price difference display\r\n *\r\n * @param {Object} analysis - Price analysis object\r\n * @returns {Object} - Formatted display info\r\n */\nexport const formatPriceAnalysis = analysis => {\n  if (!analysis || analysis.error) {\n    return {\n      displayText: \"Market analysis unavailable\",\n      className: \"price-analysis-neutral\"\n    };\n  }\n  const {\n    market_status,\n    diff_percentage\n  } = analysis;\n\n  // Format the display based on market status\n  switch (market_status) {\n    case \"underpriced\":\n      return {\n        displayText: `${Math.abs(diff_percentage).toFixed(1)}% below market value`,\n        className: \"price-analysis-good-deal\"\n      };\n    case \"overpriced\":\n      return {\n        displayText: `${Math.abs(diff_percentage).toFixed(1)}% above market value`,\n        className: \"price-analysis-high\"\n      };\n    case \"fair\":\n      return {\n        displayText: \"Fair market price\",\n        className: \"price-analysis-fair\"\n      };\n    default:\n      return {\n        displayText: \"Market analysis available\",\n        className: \"price-analysis-neutral\"\n      };\n  }\n};","map":{"version":3,"names":["axios","ML_SERVICE_URL","process","env","REACT_APP_ML_SERVICE_URL","getMarketPriceAnalysis","car","NODE_ENV","console","log","getMockPriceAnalysis","response","post","brand","year","mileage","current_price","price","data","error","currentPrice","randomFactor","Math","random","predictedPrice","diffPercentage","marketStatus","analysis","predicted_price","diff_percentage","market_status","formatPriceAnalysis","displayText","className","abs","toFixed"],"sources":["D:/Shashini/Assignments/Assignments/2025/NSBM/Plymouth/Keith-2/luxury_car_rental/Frontend/src/utils/priceAnalysis.js"],"sourcesContent":["import axios from \"axios\"\r\n\r\n// URL for the ML price prediction service\r\nconst ML_SERVICE_URL = process.env.REACT_APP_ML_SERVICE_URL || \"http://localhost:5001\"\r\n\r\n/**\r\n * Get market price analysis for a car\r\n *\r\n * @param {Object} car - Car object with brand, year, mileage, and price\r\n * @returns {Promise<Object>} - Price analysis results\r\n */\r\nexport const getMarketPriceAnalysis = async (car) => {\r\n  try {\r\n    // For development/testing, return mock data if ML service is not available\r\n    // In production, you would remove this and rely on the actual ML service\r\n    if (process.env.NODE_ENV === \"development\") {\r\n      console.log(\"Using mock price analysis data for development\")\r\n      return getMockPriceAnalysis(car)\r\n    }\r\n\r\n    const response = await axios.post(`${ML_SERVICE_URL}/predict`, {\r\n      brand: car.brand,\r\n      year: car.year,\r\n      mileage: car.mileage || 0,\r\n      current_price: car.price,\r\n    })\r\n\r\n    return response.data\r\n  } catch (error) {\r\n    console.error(\"Error fetching price analysis:\", error)\r\n    // Fallback to mock data if the service is unavailable\r\n    return getMockPriceAnalysis(car)\r\n  }\r\n}\r\n\r\n/**\r\n * Generate mock price analysis data for development/testing\r\n *\r\n * @param {Object} car - Car object with price\r\n * @returns {Object} - Mock price analysis data\r\n */\r\nconst getMockPriceAnalysis = (car) => {\r\n  const currentPrice = car.price\r\n\r\n  // Generate a random predicted price within ±20% of the current price\r\n  const randomFactor = 0.8 + Math.random() * 0.4 // Between 0.8 and 1.2\r\n  const predictedPrice = currentPrice * randomFactor\r\n\r\n  // Calculate difference percentage\r\n  const diffPercentage = ((predictedPrice - currentPrice) / currentPrice) * 100\r\n\r\n  // Determine market status based on the difference\r\n  let marketStatus, analysis\r\n\r\n  if (diffPercentage > 5) {\r\n    marketStatus = \"underpriced\"\r\n    analysis = \"This car appears to be priced below the estimated market value.\"\r\n  } else if (diffPercentage < -5) {\r\n    marketStatus = \"overpriced\"\r\n    analysis = \"This car appears to be priced above the estimated market value.\"\r\n  } else {\r\n    marketStatus = \"fair\"\r\n    analysis = \"This car is priced fairly according to the current market.\"\r\n  }\r\n\r\n  return {\r\n    current_price: currentPrice,\r\n    predicted_price: predictedPrice,\r\n    diff_percentage: diffPercentage,\r\n    market_status: marketStatus,\r\n    analysis: analysis,\r\n  }\r\n}\r\n\r\n/**\r\n * Format the price difference display\r\n *\r\n * @param {Object} analysis - Price analysis object\r\n * @returns {Object} - Formatted display info\r\n */\r\nexport const formatPriceAnalysis = (analysis) => {\r\n  if (!analysis || analysis.error) {\r\n    return {\r\n      displayText: \"Market analysis unavailable\",\r\n      className: \"price-analysis-neutral\",\r\n    }\r\n  }\r\n\r\n  const { market_status, diff_percentage } = analysis\r\n\r\n  // Format the display based on market status\r\n  switch (market_status) {\r\n    case \"underpriced\":\r\n      return {\r\n        displayText: `${Math.abs(diff_percentage).toFixed(1)}% below market value`,\r\n        className: \"price-analysis-good-deal\",\r\n      }\r\n    case \"overpriced\":\r\n      return {\r\n        displayText: `${Math.abs(diff_percentage).toFixed(1)}% above market value`,\r\n        className: \"price-analysis-high\",\r\n      }\r\n    case \"fair\":\r\n      return {\r\n        displayText: \"Fair market price\",\r\n        className: \"price-analysis-fair\",\r\n      }\r\n    default:\r\n      return {\r\n        displayText: \"Market analysis available\",\r\n        className: \"price-analysis-neutral\",\r\n      }\r\n  }\r\n}\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}